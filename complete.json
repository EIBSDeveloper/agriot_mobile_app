{
  "context": {
    "app_scale": "large",
    "tech_stack": [
      "Flutter",
      "GetX",
      "GetStorage",
      "GetX Localization",
      "HTTP"
    ],
    "http_service": "Reuse existing HttpService for all API calls (get/post/put/multipart with built-in error handling).",
    "architecture": "Clean Architecture (GetX)",
    "constraints": {
      "themes": "Use Get.theme only (no custom themes)",
      "localization": "Use GetX Localization",
      "feedback": "Use Flutter toast (no SnackBar)",
      "performance": [
        "avoid memory leaks",
        "minimize widget rebuilds",
        "ensure smooth UI",
        "provide instant feedback"
      ]
    }
  },
  "inputs": {
    "api_endpoints": [
      {
        "name": "<endpoint_name>",
        "method": "GET|POST|PUT|MULTIPART",
        "path": "<relative_path>",
        "headers": {
          "Authorization": "<token_optional>"
        },
        "query_params": {
          "<key>": "<value>"
        },
        "body_example": {
          "<key>": "<value>"
        }
      }
    ],
    "json_responses": {
      "<endpoint_name_response>": {
        "status": true,
        "message": "Success",
        "data": {
          "...": "..."
        }
      }
    },
    "ui_image": "<screen_image_link_or_description>",
    "ux_flow": "Describe screen flow and user journey."
  },
  "module_scope": {
    "type": "single_screen",
    "screen_key": "<unique_screen_id>",
    "route": "/<route>",
    "storage_keys": [
      "<GetStorage_key_if_any>"
    ]
  },
  "deliverables": {
    "code": [
      "controller",
      "models",
      "repository",
      "view_widgets",
      "bindings",
      "routes",
      "localization_en"
    ],
    "rules": [
      "Reuse HttpService for network operations",
      "Follow GetX structure (controllers, models, repository, views, bindings, routes)",
      "Use toast for feedback (no SnackBar)",
      "Dispose resources to avoid leaks",
      "Place Obx/GetBuilder carefully to minimize rebuilds"
    ]
  },
  "screen_spec": {
    "name": "<Screen Name>",
    "inputs_and_controls": [
      {
        "id": "<field_id>",
        "widget": "TextFormField|Dropdown|DatePicker|Switch|Checkbox",
        "hint": "<hint_text>",
        "constraints": {
          "required": true,
          "min_length": 3,
          "max_length": 50,
          "pattern": "<regex_optional>"
        },
        "keyboard_type": "text|email|number|phone"
      }
    ],
    "user_interactions": [
      {
        "trigger": "onTap|onPressed|onChanged",
        "target_id": "<widget_id>",
        "action": "navigate|submit_form|refresh|open_sheet",
        "navigation": {
          "to": "/<route>",
          "with_args": {
            "<key>": "<value>"
          }
        },
        "state_changes": [
          "loading=true",
          "show_toast='Saved'",
          "loading=false"
        ]
      }
    ],
    "validation_rules": [
      {
        "field_id": "<field_id>",
        "rules": [
          "required",
          "email_format|min|max|regex"
        ],
        "error_messages": {
          "required": "This field is required",
          "email_format": "Enter a valid email"
        }
      }
    ],
    "api_mapping": {
      "load_on_init": {
        "endpoint": "<endpoint_name>",
        "params": {
          "<q>": "<v>"
        },
        "maps_to_model": "<ModelName>"
      },
      "submit_actions": [
        {
          "trigger_id": "<submit_button_id>",
          "endpoint": "<endpoint_name>",
          "method": "POST|PUT|MULTIPART",
          "body": {
            "<field_id>": "<controller.value>"
          },
          "on_success": [
            "update_state",
            "show_toast:'Success'",
            "navigate:'/next'"
          ],
          "on_error": [
            "show_toast:'Failed'",
            "set_error_state"
          ]
        }
      ]
    },
    "state_management": {
      "controller": "<ScreenController>",
      "observables": [
        "isLoading",
        "items",
        "formState",
        "error"
      ],
      "rebuild_strategy": "Wrap only dynamic parts with Obx/GetBuilder; keep Scaffold static"
    },
    "storage_usage": {
      "read": [
        {
          "key": "<GetStorage_key>",
          "purpose": "auth token"
        }
      ],
      "write": [
        {
          "key": "<GetStorage_key>",
          "source": "<controller.field>"
        }
      ]
    },
    "localization_keys_en": [
      {
        "key": "screen.title",
        "value": "Title"
      },
      {
        "key": "button.submit",
        "value": "Submit"
      },
      {
        "key": "toast.success",
        "value": "Saved successfully"
      }
    ],
    "routes": {
      "define": [
        {
          "name": "/<route>",
          "page": "<ScreenWidget>",
          "binding": "<ScreenBinding>"
        }
      ],
      "guards": [
        {
          "type": "auth_guard_optional",
          "redirect_to": "/login"
        }
      ]
    },
    "feedback_toast": {
      "library": "fluttertoast",
      "patterns": [
        {
          "when": "success",
          "message_key": "toast.success"
        },
        {
          "when": "error",
          "message_key": "toast.error"
        }
      ]
    },
    "error_handling": {
      "network": [
        "timeout_toast",
        "optional_retry"
      ],
      "validation": [
        "field_level_errors",
        "disable_submit_if_invalid"
      ]
    },
    "performance": {
      "tips": [
        "Use permanent bindings if caching needed",
        "Dispose controllers in onClose",
        "Prefer const widgets",
        "Split UI into smaller stateless components"
      ]
    },
    "accessibility": {
      "semantics": true,
      "min_tap_size": 48
    },
    "tests": {
      "unit": [
        "repository returns parsed model",
        "controller maps API to state"
      ],
      "widget": [
        "renders loading/data states",
        "form validation shows errors"
      ],
      "navigation": [
        "navigates on success"
      ]
    },
    "acceptance_criteria": [
      "Screen loads initial data via repository using HttpService",
      "User actions show instant toast feedback",
      "No unnecessary rebuilds; smooth performance",
      "All strings localized"
    ]
  },
  "output_format": {
    "generate": {
      "controller": "<ScreenController.dart>",
      "models": [
        "<PrimaryModel>.dart",
        "<NestedModel>.dart"
      ],
      "repository": "<ScreenRepository.dart>",
      "views": [
        "<ScreenWidget>.dart",
        "components/<PartWidget>.dart"
      ],
      "bindings": "<ScreenBinding.dart>",
      "routes": "append_to_routes_map",
      "localization_en": "append_to_en_US.json"
    },
    "notes": [
      "Do not create a new HTTP client",
      "Keep files inside modules/<screen_key>/",
      "Do not expose secrets in code"
    ]
  },
  "screens": [
    {
      "screen": "Update Employee Payouts Screen",
      "purpose": "Allow the user to update and manage the payouts for an employee, including entering deductions, payout amount, and payment details.",
      "ui_elements": {
        "static": [
          "Screen title: 'Update Employee Payouts'",
          "Labels: Employee Type, Work Type, Employee Name, Advance, Date of Payouts, Balance Advance, To Pay",
          "Pre-filled Employee Name and ID (e.g., 'Raghu E - 9845784512')",
          "Pre-filled Advance and Balance Advance amounts",
          "Static text for each label (e.g., 'Monthly Salaries', 'Planting Work', etc.)"
        ],
        "dynamic": [
          "DatePicker for Date of Payouts",
          "TextField for Deduction of Advance Amount",
          "TextField for Payouts Amount",
          "TextField for To Pay",
          "TextField for Description"
        ]
      },
      "layout_recommendations": [
        "Use Scaffold with a SingleChildScrollView to accommodate multiple input fields and avoid overflow",
        "Column for vertical alignment of fields",
        "Padding with EdgeInsets.symmetric(16) to create space around elements",
        "Row widget to place labels and input fields side by side where applicable",
        "Text styling with Theme.of(context).textTheme for consistent font style",
        "Use SizedBox for spacing between fields",
        "Action buttons ('Cancel' and 'Update Payouts') placed at the bottom in a Row widget"
      ],
      "input_controls": [
        {
          "type": "date_picker",
          "label": "Date of Payouts",
          "required": true
        },
        {
          "type": "text_field",
          "label": "Deduction of Advance Amount",
          "keyboard": "number",
          "required": true
        },
        {
          "type": "text_field",
          "label": "Payouts Amount",
          "keyboard": "number",
          "required": true
        },
        {
          "type": "text_field",
          "label": "To Pay",
          "keyboard": "number",
          "required": false
        },
        {
          "type": "text_field",
          "label": "Description",
          "keyboard": "text",
          "required": false
        }
      ],
      "user_interactions": [
        "Tap on date field opens the calendar picker",
        "Text fields are editable with numeric input for amounts",
        "Tap 'Cancel' button clears the form and navigates back",
        "Tap 'Update Payouts' button triggers form validation and updates payouts"
      ],
      "validation_rules": {
        "date_of_payouts": "required, valid_date_format",
        "deduction_of_advance_amount": "required, numeric >= 0",
        "payouts_amount": "required, numeric >= 0",
        "to_pay": "numeric >= 0 (optional)",
        "description": "optional, text"
      },
      "actions": [
        {
          "type": "button",
          "label": "Cancel",
          "action": "clear_form_and_navigate_back"
        },
        {
          "type": "button",
          "label": "Update Payouts",
          "action": "submit_form_and_update_payouts"
        }
      ]
    }
  ],
  "api_details": [
    {
      "Endpoint Name": "Employee Payouts Details",
      "HTTP Method": "Get",
      "URL Path": "/get_employee_list/formerID/emloyeeId",
      "Response Body": [
        {
          "id": 12,
          "name": "Bala",
          "profile": "",
          "joing_date": "12-02-2025",
          "user_name": null,
          "password": null,
          "gender": "male",
          "role": "Emplyee",
          "salary_type": "regular",
          "salary": 1000,
          "mobile_number": 8608080510,
          "alternative_mobile_number": 8608080510,
          "email_id": "bala00@gmail.com",
          "pincode": 121312,
          "discription": ""
        }
      ]
    },
    {
      "Endpoint Name": "Employee Payouts add",
      "HTTP Method": "post",
      "URL Path": "/add_employe_Payouts/formerID/emloyeeId",
      "Post Body": [
        {
          "name": "manager",
          "profile": "",
          "joing_date": "12-02-2025",
          "user_name": null,
          "password": null,
          "gender": "male",
          "role": "Manager",
          "salary_type": "regular",
          "salary": 1000,
          "mobile_number": 8602280510,
          "alternative_mobile_number": 8602280510,
          "email_id": "balaqq00@gmail.com",
          "pincode": 121312,
          "discription": ""
        }
      ]
    }
  ]
}