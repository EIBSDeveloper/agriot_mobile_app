{
  "context": {
    "app_scale": "large",
    "tech_stack": [
      "Flutter",
      "GetX",
      "GetStorage",
      "GetX Localization",
      "HTTP"
    ],
    "http_service": "Reuse existing HttpService for all API calls (get/post/put/multipart with built-in error handling).",
    "architecture": "Clean Architecture (GetX)",
    "constraints": {
      "themes": "Use Get.theme only (no custom themes)",
      "localization": "Use GetX Localization",
      "feedback": "Use Flutter toast (no SnackBar)",
      "performance": [
        "avoid memory leaks",
        "minimize widget rebuilds",
        "ensure smooth UI",
        "provide instant feedback"
      ]
    }
  },
  "inputs": {
    "api_endpoints": [
      {
        "name": "<endpoint_name>",
        "method": "GET|POST|PUT|MULTIPART",
        "path": "<relative_path>",
        "headers": {
          "Authorization": "<token_optional>"
        },
        "query_params": {
          "<key>": "<value>"
        },
        "body_example": {
          "<key>": "<value>"
        }
      }
    ],
    "json_responses": {
      "<endpoint_name_response>": {
        "status": true,
        "message": "Success",
        "data": {
          "...": "..."
        }
      }
    },
    "ui_image": "<screen_image_link_or_description>",
    "ux_flow": "Describe screen flow and user journey."
  },
  "module_scope": {
    "type": "single_screen",
    "screen_key": "<unique_screen_id>",
    "route": "/<route>",
    "storage_keys": [
      "<GetStorage_key_if_any>"
    ]
  },
  "deliverables": {
    "code": [
      "controller",
      "models",
      "repository",
      "view_widgets",
      "bindings",
      "routes",
      "localization_en"
    ],
    "rules": [
      "Reuse HttpService for network operations",
      "Follow GetX structure (controllers, models, repository, views, bindings, routes)",
      "Use toast for feedback (no SnackBar)",
      "Dispose resources to avoid leaks",
      "Place Obx/GetBuilder carefully to minimize rebuilds"
    ]
  },
  "screen_spec": {
    "name": "<Screen Name>",
    "inputs_and_controls": [
      {
        "id": "<field_id>",
        "widget": "TextFormField|Dropdown|DatePicker|Switch|Checkbox",
        "hint": "<hint_text>",
        "constraints": {
          "required": true,
          "min_length": 3,
          "max_length": 50,
          "pattern": "<regex_optional>"
        },
        "keyboard_type": "text|email|number|phone"
      }
    ],
    "user_interactions": [
      {
        "trigger": "onTap|onPressed|onChanged",
        "target_id": "<widget_id>",
        "action": "navigate|submit_form|refresh|open_sheet",
        "navigation": {
          "to": "/<route>",
          "with_args": {
            "<key>": "<value>"
          }
        },
        "state_changes": [
          "loading=true",
          "show_toast='Saved'",
          "loading=false"
        ]
      }
    ],
    "validation_rules": [
      {
        "field_id": "<field_id>",
        "rules": [
          "required",
          "email_format|min|max|regex"
        ],
        "error_messages": {
          "required": "This field is required",
          "email_format": "Enter a valid email"
        }
      }
    ],
    "api_mapping": {
      "load_on_init": {
        "endpoint": "<endpoint_name>",
        "params": {
          "<q>": "<v>"
        },
        "maps_to_model": "<ModelName>"
      },
      "submit_actions": [
        {
          "trigger_id": "<submit_button_id>",
          "endpoint": "<endpoint_name>",
          "method": "POST|PUT|MULTIPART",
          "body": {
            "<field_id>": "<controller.value>"
          },
          "on_success": [
            "update_state",
            "show_toast:'Success'",
            "navigate:'/next'"
          ],
          "on_error": [
            "show_toast:'Failed'",
            "set_error_state"
          ]
        }
      ]
    },
    "state_management": {
      "controller": "<ScreenController>",
      "observables": [
        "isLoading",
        "items",
        "formState",
        "error"
      ],
      "rebuild_strategy": "Wrap only dynamic parts with Obx/GetBuilder; keep Scaffold static"
    },
    "storage_usage": {
      "read": [
        {
          "key": "<GetStorage_key>",
          "purpose": "auth token"
        }
      ],
      "write": [
        {
          "key": "<GetStorage_key>",
          "source": "<controller.field>"
        }
      ]
    },
    "localization_keys_en": [
      {
        "key": "screen.title",
        "value": "Title"
      },
      {
        "key": "button.submit",
        "value": "Submit"
      },
      {
        "key": "toast.success",
        "value": "Saved successfully"
      }
    ],
    "routes": {
      "define": [
        {
          "name": "/<route>",
          "page": "<ScreenWidget>",
          "binding": "<ScreenBinding>"
        }
      ],
      "guards": [
        {
          "type": "auth_guard_optional",
          "redirect_to": "/login"
        }
      ]
    },
    "feedback_toast": {
      "library": "fluttertoast",
      "patterns": [
        {
          "when": "success",
          "message_key": "toast.success"
        },
        {
          "when": "error",
          "message_key": "toast.error"
        }
      ]
    },
    "error_handling": {
      "network": [
        "timeout_toast",
        "optional_retry"
      ],
      "validation": [
        "field_level_errors",
        "disable_submit_if_invalid"
      ]
    },
    "performance": {
      "tips": [
        "Use permanent bindings if caching needed",
        "Dispose controllers in onClose",
        "Prefer const widgets",
        "Split UI into smaller stateless components"
      ]
    },
    "accessibility": {
      "semantics": true,
      "min_tap_size": 48
    },
    "tests": {
      "unit": [
        "repository returns parsed model",
        "controller maps API to state"
      ],
      "widget": [
        "renders loading/data states",
        "form validation shows errors"
      ],
      "navigation": [
        "navigates on success"
      ]
    },
    "acceptance_criteria": [
      "Screen loads initial data via repository using HttpService",
      "User actions show instant toast feedback",
      "No unnecessary rebuilds; smooth performance",
      "All strings localized"
    ]
  },
  "output_format": {
    "generate": {
      "controller": "<ScreenController.dart>",
      "models": [
        "<PrimaryModel>.dart",
        "<NestedModel>.dart"
      ],
      "repository": "<ScreenRepository.dart>",
      "views": [
        "<ScreenWidget>.dart",
        "components/<PartWidget>.dart"
      ],
      "bindings": "<ScreenBinding.dart>",
      "routes": "append_to_routes_map",
      "localization_en": "append_to_en_US.json"
    },
    "notes": [
      "Do not create a new HTTP client",
      "Keep files inside modules/<screen_key>/",
      "Do not expose secrets in code"
    ]
  },
  "screens": [
    {
      "screen": "Machinery Entry Screen",
      "purpose": "To allow users to enter and manage machinery details including inventory category, item, vendor, fuel/manual type, fuel capacity, purchase amount, warranty dates, document uploads, and descriptions.",
      "ui_elements": {
        "static": [
          "App bar with logo and profile icon",
          "Screen title 'Machinery'",
          "Labels for each input field",
          "Icons: back arrow, calendar icons, plus icon, notification bell"
        ],
        "dynamic": [
          "Date picker for date selection",
          "Dropdown for Inventory Category",
          "Dropdown for Inventory Item",
          "Dropdown for Vendor with add (+) button",
          "Radio buttons for Fuel and Manual selection",
          "Text input for Fuel Capacity",
          "Text input for Purchase Amount",
          "Date pickers for Warranty Start and End Dates",
          "Dropdown for Upload Documents",
          "Text input for Description",
          "Add button"
        ]
      },
      "layout_recommendations": [
        "Use Scaffold with AppBar for top bar",
        "SingleChildScrollView or ListView for scrolling",
        "Column for vertical arrangement of inputs",
        "Padding with EdgeInsets.all(16) for consistent spacing",
        "Row for horizontally aligned radio buttons and vendor add button",
        "Use Divider widgets to separate sections visually",
        "Consistent use of TextStyles for labels and inputs",
        "Use theme colors for buttons and icons for consistency"
      ],
      "input_controls": [
        {
          "type": "date_picker",
          "label": "Date",
          "required": true,
          "behavior": "Opens calendar picker on tap"
        },
        {
          "type": "dropdown",
          "label": "Inventory Category",
          "required": true,
          "behavior": "Dropdown menu showing categories"
        },
        {
          "type": "dropdown",
          "label": "Inventory Item",
          "required": true,
          "behavior": "Dropdown menu filtered by selected category"
        },
        {
          "type": "dropdown",
          "label": "Vendor",
          "required": true,
          "behavior": "Dropdown menu with option to add new vendor using plus button"
        },
        {
          "type": "radio_button_group",
          "label": "Type",
          "options": [
            "Fuel",
            "Manual"
          ],
          "required": true,
          "behavior": "Toggle selection between Fuel and Manual"
        },
        {
          "type": "text_field",
          "label": "Fuel Capacity",
          "keyboard": "number",
          "required": false,
          "behavior": "Visible/enabled only if Fuel type is selected"
        },
        {
          "type": "text_field",
          "label": "Purchase Amount",
          "keyboard": "number",
          "required": true
        },
        {
          "type": "date_picker",
          "label": "Warranty Start Date",
          "required": false,
          "behavior": "Opens calendar picker"
        },
        {
          "type": "date_picker",
          "label": "Warranty End Date",
          "required": false,
          "behavior": "Opens calendar picker"
        },
        {
          "type": "dropdown",
          "label": "Upload Documents",
          "required": false,
          "behavior": "Dropdown or file picker for document upload"
        },
        {
          "type": "text_field",
          "label": "Description",
          "keyboard": "multiline",
          "required": false
        }
      ],
      "user_interactions": [
        "Tap back arrow to navigate to previous screen",
        "Tap calendar icons to open date picker dialogs",
        "Select dropdowns to pick inventory category, item, vendor, and documents",
        "Tap plus button to add a new vendor (opens modal or new screen)",
        "Select Fuel or Manual radio buttons to toggle input fields (Fuel Capacity enabled only for Fuel)",
        "Type in text fields for fuel capacity, purchase amount, description",
        "Tap Add button to validate and submit the form",
        "Notification bell icon might show notifications"
      ],
      "validation_rules": {
        "date": "required, must be a valid date, not in the future",
        "inventory_category": "required, must select from dropdown",
        "inventory_item": "required, must select from dropdown",
        "vendor": "required, must select or add new vendor",
        "fuel_capacity": "required if Fuel selected, numeric > 0",
        "purchase_amount": "required, numeric > 0",
        "warranty_start_date": "optional, must be valid date",
        "warranty_end_date": "optional, must be valid date, >= warranty_start_date",
        "upload_documents": "optional, file type restrictions if applicable",
        "description": "optional, max length could be set"
      },
      "actions": [
        {
          "type": "button",
          "label": "Add",
          "action": "submit_form_and_save_machinery_details"
        },
        {
          "type": "button",
          "label": "+ (Add Vendor)",
          "action": "open_add_vendor_modal_or_screen"
        }
      ]
    }
  ],
  "api_details": [
    {
      "name": "Add Fuel",
      "method": "POST",
      "path": "/add_fuel/<FarmerId>/",
      "body": {
        "date_of_consumption": "2025-03-25",
        "vendor": "1",
        "inventory_type": "6",
        "inventory_category": "6",
        "inventory_items": "6",
        "quantity": "20",
        "purchase_amount": "300",
        "description": "Add Fuel"
      },
      "response": {
        "success": true,
        "message": "Fuel added successfully!"
      }
    }
  ]
}